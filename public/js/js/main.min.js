
// the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
$('.modal').modal({
    dismissible: true, // Modal can be dismissed by clicking outside of the modal
    opacity: .5, // Opacity of modal background
    inDuration: 300, // Transition in duration
    outDuration: 200, // Transition out duration
    startingTop: '4%', // Starting top style attribute
    endingTop: '10%', // Ending top style attribute
    ready: function (modal, trigger) { // Callback for Modal open. Modal and trigger parameters available.
        //  alert("Ready");
        //  console.log(modal, trigger);
    },
    complete: function () {
        //  alert('Closed');
    } // Callback for Modal close
});

//---------------------------------------------------
//*************************SELECT*******************/
//---------------------------------------------------
$('select').material_select();

 // Hanlde select change event (currently materialize doesn't work well)
$(".select-wrapper li").on("click", function () {
    var text = "";
    //alert($(this).parent().children().index(this));
    text = $(this).find("span").text();

    var selectType = $(this).parent().siblings("select");
    //selectType.find('option:contains(' + text + ')').attr("selected", true);
    selectType.find('option[value="'+text+'"]').attr("selected", true);
});

(function($ = $("select")) {
    $.fn.fillValues = function(options) {
        var settings = $.extend({
            datas : null, 
            complete : null,
        }, options);

        this.each( function(){
           var datas = settings.datas;
           if(datas !=null) {
               $(this).empty();
               for(var key in datas){
                   $(this).append('<option value="'+datas[key].id+'"'+datas[key].selected+'>'+datas[key].value+'</option>');
               }
           }
           if($.isFunction(settings.complete)){
               settings.complete.call(this);
           }
       });

   }

}(jQuery));

//---------------------------------------------------
//***************DATE/TIME PICKERS******************/
//---------------------------------------------------
$('.datepicker').pickadate({
    selectMonths: true, // Creates a dropdown to control month
    selectYears: 15, // Creates a dropdown of 15 years to control year,
    format: "dd/mm/yyyy",
    today: 'Today',
    clear: 'Clear',
    close: 'Ok',
    closeOnSelect: false // Close upon selecting a date,
});
$('.timepicker').pickatime({
    default: 'now', // Set default time: 'now', '1:30AM', '16:30'
    fromnow: 0,       // set default time to * milliseconds from now (using with default = 'now')
    twelvehour: false, // Use AM/PM or 24-hour format
    donetext: 'OK', // text for done-button
    cleartext: 'Clear', // text for clear-button
    canceltext: 'Cancel', // Text for cancel-button
    autoclose: false, // automatic close timepicker
    ampmclickable: true, // make AM PM clickable
    aftershow: function(){} //Function for after opening timepicker
});


//--------------------------------------------------
//************** Global Variables*******************/
var arrMonth = {"en":["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dec"], "es":["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dec"]}

// --------------- wine   ----- gold ------salmon ---- orange -- melon--- yellow -- yellow-green --- green -- Aqua--- light-blue -- blue --- pink ----- fushia
var arrColors = [ "#ab1323", "#ffcc00",  "#f75a56", "#ff9d9b", "#f69d3a", "#ffff00", "#ccff33", "#00ff00", "#00ffff", "#3399ff", "#0000ff", "#ff99cc", "#ff00ff" ]

//---------------------------------------------------
//*************Global functions **********************/

function isInArray(arr,obj) {
    return (arr.indexOf(obj) != -1);
}

function getMonth(num){
    if (num>0){
        return arrMonth["{{.user.Device.Language}}"!=""?"{{.user.Device.Language}}":"en"][num]
    }
    return ""
}

/* Utility function to convert a canvas to a BLOB */
var dataURLToBlob = function(dataURL) {
    var BASE64_MARKER = ';base64,';
    if (dataURL.indexOf(BASE64_MARKER) == -1) {
        var parts = dataURL.split(',');
        var contentType = parts[0].split(':')[1];
        var raw = parts[1];

        return new Blob([raw], {type: contentType});
    }

    var parts = dataURL.split(BASE64_MARKER);
    var contentType = parts[0].split(':')[1];
    var raw = window.atob(parts[1]);
    var rawLength = raw.length;

    var uInt8Array = new Uint8Array(rawLength);

    for (var i = 0; i < rawLength; ++i) {
        uInt8Array[i] = raw.charCodeAt(i);
    }

    return new Blob([uInt8Array], {type: contentType});
}

function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for(var i = 0; i <ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

function validateInputFile(){
    $('input[type=file][max-size]').each(function(){
      if(typeof this.files[0] !== 'undefined'){
        var maxSize = parseInt($(this).attr('max-size'),10),
        size = this.files[0].size;
        if(maxSize <= size) return false
      }
    });
    return false
}

function ParseDateString(date){
    var twoDigits = ('00'+date).slice(-2);
    return date.toLocaleDateString()+ "  " + ('00'+date.getHours()).slice(-2) + ":"+ ('00'+date.getMinutes()).slice(-2) +":" + ('00'+date.getSeconds()).slice(-2)
}

function ParseDatesArray(arr, fieldName){
    for (var i=0; i< arr.length; i++){
        arr[i][fieldName] = ParseDateString(new Date(arr[i][fieldName]))
    }
    return arr
}

function toValidDate(ddMMyyyyDate){
    var dateStr = ddMMyyyyDate.split("/");
    return new Date(dateStr[1]+"/"+dateStr[0]+"/"+dateStr[2]);
  }